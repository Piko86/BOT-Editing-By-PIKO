const axios = require('axios');
const { cmd } = require('../command');

cmd({
    pattern: "oresult",
    desc: "Get G.C.E. O/L result by index or NIC number.",
    category: "education",
    react: "üìÑ",
    filename: __filename
},
async (conn, mek, m, { from, reply, sender, args }) => {
    try {
        const query = args.length > 0 ? args.join(' ') : m.text.replace(/^[\.\#\$\!]?oresult\s?/i, '').trim();

        if (!query) {
            return reply("üìÑ Please provide your *Index Number* or *NIC Number*.\n\nüìå Example: `.oresult 41529243`");
        }

        const apiUrl = `https://api.omindu.dev/api/exam/ol?index=${encodeURIComponent(query)}`;
        const res = await axios.get(apiUrl);
        const data = res.data;

        if (!data.success || !data.result) {
            return reply("‚ùå No result found. Please check your Index or NIC number.");
        }

        const details = data.result.examinationDetails;
        const subjects = data.result.subjectResults;

        const resultText = subjects.map(sub => `üìò ${sub.subject}: *${sub.result}*`).join('\n');

        const finalMessage = `üéì *ùêÜ.ùêÇ.ùêÑ. ùêé/ùêã ùêÑx·¥Ä·¥ç…™…¥·¥Ä·¥õ…™·¥èùêç - ${details.year}*\n\n` +
                             `üë§ *ùôΩùô∞ùôºùô¥:* ${details.name}\n` +
                             `üÜî *ùô∏ùôΩùô≥ùô¥ùöá:* ${details.indexNumber}\n` +
                             `ü™™ *ùôΩùô∏ùô≤:* ${details.nicNumber}\n\n` +
                             `üìö *ùöÇùöÑùô±ùôπùô¥ùô≤ùöÉ ùöÅùô¥ùöÇùöÑùôªùöÉùöÇ:*\n${resultText}\n\n` +
                             `> *¬© Powered By King-Sandesh-Md V2 üí∏*`;

        await conn.sendMessage(
            from,
            {
                text: finalMessage,
                contextInfo: {
                    mentionedJid: [sender],
                    forwardingScore: 999,
                    isForwarded: true
                }
            },
            { quoted: mek }
        );

    } catch (error) {
        console.error("Oresult Command Error:", error);
        reply("‚ö†Ô∏è Error fetching the result. Please try again later.");
    }
});
